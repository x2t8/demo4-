import React, { useState, useEffect } from "react";
import { AlertTriangle, Clock, TrendingUp, ExternalLink } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";

interface ScamAlert {
  id: string;
  title: string;
  description: string;
  type: "urgent" | "warning" | "info";
  timestamp: string;
  source: string;
  affectedArea?: string;
  reportCount?: number;
}

const mockAlerts: ScamAlert[] = [
  {
    id: "1",
    title: "üö® L·ª´a ƒë·∫£o gi·∫£ m·∫°o Vietcombank qua Zalo",
    description:
      "Ph√°t hi·ªán h√†ng lo·∫°t tin nh·∫Øn gi·∫£ m·∫°o ng√¢n h√†ng Vietcombank y√™u c·∫ßu c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n qua link l·∫°.",
    type: "urgent",
    timestamp: "2 ph√∫t tr∆∞·ªõc",
    source: "B√°o c√°o t·ª´ c·ªông ƒë·ªìng",
    affectedArea: "TP.HCM, H√† N·ªôi",
    reportCount: 127,
  },
  {
    id: "2",
    title: "‚ö†Ô∏è S√†n ƒë·∫ßu t∆∞ FXPro gi·∫£ m·∫°o",
    description:
      "C·∫£nh b√°o v·ªÅ website fxpro-vn.com gi·∫£ m·∫°o s√†n FXPro qu·ªëc t·∫ø, ƒë√£ c√≥ nhi·ªÅu ng∆∞·ªùi b·ªã l·ª´a ti·ªÅn ƒë·∫ßu t∆∞.",
    type: "warning",
    timestamp: "15 ph√∫t tr∆∞·ªõc",
    source: "X√°c minh t·ª´ chuy√™n gia",
    affectedArea: "To√†n qu·ªëc",
    reportCount: 85,
  },
  {
    id: "3",
    title: "üì¢ Th·ªß ƒëo·∫°n m·ªõi: AI Voice gi·∫£ m·∫°o",
    description:
      "Xu·∫•t hi·ªán th·ªß ƒëo·∫°n s·ª≠ d·ª•ng AI ƒë·ªÉ gi·∫£ gi·ªçng n√≥i ng∆∞·ªùi th√¢n qua ƒëi·ªán tho·∫°i, y√™u c·∫ßu chuy·ªÉn ti·ªÅn kh·∫©n c·∫•p.",
    type: "info",
    timestamp: "1 gi·ªù tr∆∞·ªõc",
    source: "C·∫≠p nh·∫≠t t·ª´ B·ªô C√¥ng An",
    affectedArea: "Mi·ªÅn B·∫Øc",
    reportCount: 43,
  },
  {
    id: "4",
    title: "üîç Website fake shop th·ªùi trang",
    description:
      "Ph√°t hi·ªán nh√≥m website b√°n h√†ng th·ªùi trang gi·∫£ (shop-fashion-vn.com v√† c√°c domain t∆∞∆°ng t·ª±) nh·∫≠n ti·ªÅn kh√¥ng giao h√†ng.",
    type: "warning",
    timestamp: "3 gi·ªù tr∆∞·ªõc",
    source: "B√°o c√°o t·ª´ kh√°ch h√†ng",
    affectedArea: "To√†n qu·ªëc",
    reportCount: 234,
  },
];

export default function ScamAlert() {
  const [alerts, setAlerts] = useState<ScamAlert[]>(mockAlerts);
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000); // Update every minute

    return () => clearInterval(timer);
  }, []);

  const getAlertStyle = (type: ScamAlert["type"]) => {
    switch (type) {
      case "urgent":
        return "border-red-500 bg-red-50 dark:bg-red-900/20";
      case "warning":
        return "border-orange-500 bg-orange-50 dark:bg-orange-900/20";
      case "info":
        return "border-blue-500 bg-blue-50 dark:bg-blue-900/20";
      default:
        return "border-gray-300 bg-gray-50 dark:bg-gray-800";
    }
  };

  const getAlertIcon = (type: ScamAlert["type"]) => {
    switch (type) {
      case "urgent":
        return <AlertTriangle className="h-5 w-5 text-red-600 animate-pulse" />;
      case "warning":
        return <AlertTriangle className="h-5 w-5 text-orange-600" />;
      case "info":
        return <TrendingUp className="h-5 w-5 text-blue-600" />;
      default:
        return <AlertTriangle className="h-5 w-5 text-gray-600" />;
    }
  };

  const getBadgeVariant = (type: ScamAlert["type"]) => {
    switch (type) {
      case "urgent":
        return "destructive";
      case "warning":
        return "secondary";
      case "info":
        return "outline";
      default:
        return "secondary";
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-2xl font-bold text-gray-900 dark:text-white flex items-center">
            <AlertTriangle className="h-6 w-6 mr-2 text-red-600" />
            üö® C·∫£nh B√°o L·ª´a ƒê·∫£o Realtime
          </h3>
          <p className="text-gray-600 dark:text-gray-300 mt-1">
            C·∫≠p nh·∫≠t li√™n t·ª•c t·ª´ c·ªông ƒë·ªìng v√† c√°c c∆° quan ch·ª©c nƒÉng
          </p>
        </div>
        <div className="text-right">
          <div className="flex items-center text-sm text-gray-500 dark:text-gray-400">
            <Clock className="h-4 w-4 mr-1" />
            C·∫≠p nh·∫≠t: {currentTime.toLocaleTimeString("vi-VN")}
          </div>
          <Badge variant="outline" className="mt-1">
            {alerts.length} c·∫£nh b√°o m·ªõi
          </Badge>
        </div>
      </div>

      {/* Alert List */}
      <div className="space-y-4">
        {alerts.map((alert) => (
          <Card
            key={alert.id}
            className={`border-l-4 ${getAlertStyle(alert.type)} transition-all hover:shadow-md`}
          >
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3">
                  {getAlertIcon(alert.type)}
                  <div className="flex-1">
                    <CardTitle className="text-lg leading-tight text-gray-900 dark:text-white">
                      {alert.title}
                    </CardTitle>
                    <div className="flex items-center space-x-2 mt-2">
                      <Badge
                        variant={getBadgeVariant(alert.type)}
                        className="text-xs"
                      >
                        {alert.type === "urgent"
                          ? "KH·∫®N C·∫§P"
                          : alert.type === "warning"
                            ? "C·∫¢NH B√ÅO"
                            : "TH√îNG TIN"}
                      </Badge>
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {alert.timestamp}
                      </span>
                    </div>
                  </div>
                </div>
                {alert.reportCount && (
                  <div className="text-right">
                    <div className="text-lg font-bold text-red-600">
                      {alert.reportCount}
                    </div>
                    <div className="text-xs text-gray-500">b√°o c√°o</div>
                  </div>
                )}
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              <p className="text-gray-700 dark:text-gray-300 mb-3 leading-relaxed">
                {alert.description}
              </p>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                  <span>üìç {alert.affectedArea}</span>
                  <span>üìä {alert.source}</span>
                </div>
                <Button size="sm" variant="outline" className="text-xs">
                  <ExternalLink className="h-3 w-3 mr-1" />
                  Chi ti·∫øt
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Action Buttons */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-700 rounded-lg p-6">
        <div className="text-center">
          <h4 className="font-semibold text-gray-900 dark:text-white mb-2">
            üí° Ph√°t hi·ªán l·ª´a ƒë·∫£o m·ªõi?
          </h4>
          <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">
            H√£y b√°o c√°o ngay ƒë·ªÉ c·ªông ƒë·ªìng ƒë∆∞·ª£c bi·∫øt v√† ph√≤ng tr√°nh
          </p>
          <div className="flex flex-col sm:flex-row gap-3 justify-center">
            <Button variant="outline">üìã Ki·ªÉm tra website</Button>
            <Button variant="outline">ü§ñ Chat v·ªõi AI</Button>
          </div>
        </div>
      </div>

      {/* Disclaimer */}
      <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
        <p className="text-sm text-yellow-800 dark:text-yellow-200">
          <strong>L∆∞u √Ω:</strong> ƒê√¢y l√† d·ªØ li·ªáu m√¥ ph·ªèng cho m·ª•c ƒë√≠ch demo. ƒê·ªÉ
          c√≥ th√¥ng tin c·∫£nh b√°o ch√≠nh th·ª©c, vui l√≤ng truy c·∫≠p website ch√≠nh th·ª©c
          c·ªßa c√°c c∆° quan ch·ª©c nƒÉng ho·∫∑c{" "}
          <a
            href="https://chongluadao.vn"
            className="underline font-medium"
            target="_blank"
            rel="noopener"
          >
            chongluadao.vn
          </a>
          .
        </p>
      </div>
    </div>
  );
}
