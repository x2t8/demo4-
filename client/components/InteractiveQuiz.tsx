import React, { useState } from "react";
import { CheckCircle, XCircle, ArrowRight, RotateCcw } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

interface QuizQuestion {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
  category: string;
}

const quizQuestions: QuizQuestion[] = [
  {
    id: 1,
    question:
      "B·∫°n nh·∫≠n ƒë∆∞·ª£c cu·ªôc g·ªçi t·ª´ 'C√¥ng an' y√™u c·∫ßu chuy·ªÉn ti·ªÅn ƒë·ªÉ 'b·∫£o to√†n t√†i s·∫£n'. B·∫°n n√™n l√†m g√¨?",
    options: [
      "Chuy·ªÉn ti·ªÅn ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh r·∫Øc r·ªëi",
      "C√∫p m√°y v√† g·ªçi l·∫°i s·ªë 113 ƒë·ªÉ x√°c minh",
      "H·ªèi th√™m th√¥ng tin v·ªÅ v·ª• vi·ªác",
      "Y√™u c·∫ßu h·ªç ƒë·∫øn t·∫≠n nh√† ƒë·ªÉ l√†m vi·ªác",
    ],
    correctAnswer: 1,
    explanation:
      "C√¥ng an kh√¥ng bao gi·ªù y√™u c·∫ßu chuy·ªÉn ti·ªÅn qua ƒëi·ªán tho·∫°i. Lu√¥n c√∫p m√°y v√† x√°c minh qua ƒë∆∞·ªùng d√¢y ch√≠nh th·ª©c 113.",
    category: "An to√†n s·ªë",
  },
  {
    id: 2,
    question: "Khi s·ª≠ d·ª•ng AI chatbot, th√°i ƒë·ªô n√†o l√† ph√π h·ª£p nh·∫•t?",
    options: [
      "Tin ho√†n to√†n v√†o m·ªçi th√¥ng tin AI cung c·∫•p",
      "Kh√¥ng bao gi·ªù s·ª≠ d·ª•ng AI v√¨ kh√¥ng an to√†n",
      "S·ª≠ d·ª•ng AI nh∆∞ c√¥ng c·ª• h·ªó tr·ª£ v√† lu√¥n ki·ªÉm tra th√¥ng tin",
      "Ch·ªâ s·ª≠ d·ª•ng AI cho c√¥ng vi·ªác kh√¥ng quan tr·ªçng",
    ],
    correctAnswer: 2,
    explanation:
      "AI l√† c√¥ng c·ª• h·ªó tr·ª£ m·∫°nh m·∫Ω nh∆∞ng c·∫ßn ƒë∆∞·ª£c s·ª≠ d·ª•ng m·ªôt c√°ch c√≥ tr√°ch nhi·ªám. Lu√¥n ki·ªÉm tra v√† x√°c minh th√¥ng tin t·ª´ AI.",
    category: "AI an to√†n",
  },
  {
    id: 3,
    question: "C√°ch t·ªët nh·∫•t ƒë·ªÉ x·ª≠ l√Ω tin gi·∫£ tr√™n m·∫°ng x√£ h·ªôi l√† g√¨?",
    options: [
      "Chia s·∫ª ngay ƒë·ªÉ m·ªçi ng∆∞·ªùi bi·∫øt",
      "B·ªè qua v√† kh√¥ng l√†m g√¨ c·∫£",
      "Ki·ªÉm tra ngu·ªìn g·ªëc tr∆∞·ªõc khi chia s·∫ª",
      "Ch·ªâ chia s·∫ª v·ªõi b·∫°n b√® th√¢n thi·∫øt",
    ],
    correctAnswer: 2,
    explanation:
      "Lu√¥n ki·ªÉm tra ngu·ªìn g·ªëc v√† t√≠nh ch√≠nh x√°c c·ªßa th√¥ng tin tr∆∞·ªõc khi chia s·∫ª ƒë·ªÉ tr√°nh lan truy·ªÅn tin gi·∫£.",
    category: "ƒê·∫°o ƒë·ª©c s·ªë",
  },
  {
    id: 4,
    question:
      "Khi s·ª≠ d·ª•ng h√¨nh ·∫£nh t·ª´ Internet cho d·ª± √°n, b·∫°n c·∫ßn ch√∫ √Ω ƒëi·ªÅu g√¨?",
    options: [
      "C√≥ th·ªÉ s·ª≠ d·ª•ng b·∫•t k·ª≥ h√¨nh ·∫£nh n√†o t·ª´ Google Images",
      "Ch·ªâ c·∫ßn ghi ngu·ªìn l√† ƒë·ªß",
      "Ki·ªÉm tra b·∫£n quy·ªÅn v√† xin ph√©p s·ª≠ d·ª•ng",
      "Ch·ªânh s·ª≠a h√¨nh ·∫£nh ƒë·ªÉ tr√°nh vi ph·∫°m b·∫£n quy·ªÅn",
    ],
    correctAnswer: 2,
    explanation:
      "Vi·ªác s·ª≠ d·ª•ng h√¨nh ·∫£nh c·∫ßn tu√¢n th·ªß lu·∫≠t b·∫£n quy·ªÅn. N√™n ki·ªÉm tra license v√† xin ph√©p t√°c gi·∫£ khi c·∫ßn thi·∫øt.",
    category: "Ph√°p lu·∫≠t s·ªë",
  },
];

export default function InteractiveQuiz() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showExplanation, setShowExplanation] = useState(false);
  const [score, setScore] = useState(0);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [userAnswers, setUserAnswers] = useState<number[]>([]);

  const handleAnswerSelect = (answerIndex: number) => {
    if (showExplanation) return;
    setSelectedAnswer(answerIndex);
  };

  const handleSubmitAnswer = () => {
    if (selectedAnswer === null) return;

    setShowExplanation(true);
    const newUserAnswers = [...userAnswers, selectedAnswer];
    setUserAnswers(newUserAnswers);

    if (selectedAnswer === quizQuestions[currentQuestion].correctAnswer) {
      setScore(score + 1);
    }
  };

  const handleNextQuestion = () => {
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setShowExplanation(false);
    } else {
      setQuizCompleted(true);
    }
  };

  const handleRestart = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowExplanation(false);
    setScore(0);
    setQuizCompleted(false);
    setUserAnswers([]);
  };

  const getScoreColor = () => {
    const percentage = (score / quizQuestions.length) * 100;
    if (percentage >= 80) return "text-green-600";
    if (percentage >= 60) return "text-yellow-600";
    return "text-red-600";
  };

  const getScoreMessage = () => {
    const percentage = (score / quizQuestions.length) * 100;
    if (percentage >= 80)
      return "Xu·∫•t s·∫Øc! B·∫°n c√≥ ki·∫øn th·ª©c r·∫•t t·ªët v·ªÅ an to√†n s·ªë.";
    if (percentage >= 60)
      return "Kh√° t·ªët! B·∫°n c·∫ßn √¥n luy·ªán th√™m m·ªôt s·ªë ki·∫øn th·ª©c.";
    return "C·∫ßn c·∫£i thi·ªán! H√£y h·ªçc th√™m v·ªÅ an to√†n s·ªë ƒë·ªÉ b·∫£o v·ªá b·∫£n th√¢n t·ªët h∆°n.";
  };

  if (quizCompleted) {
    return (
      <Card className="max-w-2xl mx-auto">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl">üéâ Ho√†n th√†nh Quiz!</CardTitle>
        </CardHeader>
        <CardContent className="text-center space-y-6">
          <div>
            <div className={`text-4xl font-bold ${getScoreColor()}`}>
              {score}/{quizQuestions.length}
            </div>
            <p className="text-gray-600 mt-2">{getScoreMessage()}</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-left">
            {quizQuestions.map((question, index) => (
              <div key={question.id} className="p-3 border rounded-lg">
                <div className="flex items-center space-x-2 mb-2">
                  {userAnswers[index] === question.correctAnswer ? (
                    <CheckCircle className="h-5 w-5 text-green-600" />
                  ) : (
                    <XCircle className="h-5 w-5 text-red-600" />
                  )}
                  <Badge variant="outline">{question.category}</Badge>
                </div>
                <p className="text-sm font-medium">{question.question}</p>
              </div>
            ))}
          </div>

          <Button onClick={handleRestart} className="w-full">
            <RotateCcw className="h-4 w-4 mr-2" />
            Th·ª≠ l·∫°i
          </Button>
        </CardContent>
      </Card>
    );
  }

  const question = quizQuestions[currentQuestion];

  return (
    <Card className="max-w-2xl mx-auto">
      <CardHeader>
        <div className="flex justify-between items-center">
          <Badge variant="outline">{question.category}</Badge>
          <span className="text-sm text-gray-500">
            {currentQuestion + 1}/{quizQuestions.length}
          </span>
        </div>
        <CardTitle className="text-xl">{question.question}</CardTitle>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div
            className="bg-blue-600 h-2 rounded-full transition-all duration-300"
            style={{
              width: `${((currentQuestion + 1) / quizQuestions.length) * 100}%`,
            }}
          />
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        <div className="space-y-3">
          {question.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswerSelect(index)}
              disabled={showExplanation}
              className={`w-full p-4 text-left border rounded-lg transition-all ${
                selectedAnswer === index
                  ? showExplanation
                    ? index === question.correctAnswer
                      ? "border-green-500 bg-green-50 text-green-700"
                      : "border-red-500 bg-red-50 text-red-700"
                    : "border-blue-500 bg-blue-50"
                  : showExplanation && index === question.correctAnswer
                    ? "border-green-500 bg-green-50 text-green-700"
                    : "border-gray-200 hover:border-gray-300"
              } ${showExplanation ? "cursor-not-allowed" : "cursor-pointer hover:bg-gray-50"}`}
            >
              <div className="flex items-center space-x-3">
                <span className="w-6 h-6 rounded-full border flex items-center justify-center text-sm">
                  {String.fromCharCode(65 + index)}
                </span>
                <span>{option}</span>
                {showExplanation && (
                  <>
                    {index === question.correctAnswer && (
                      <CheckCircle className="h-5 w-5 text-green-600 ml-auto" />
                    )}
                    {selectedAnswer === index &&
                      index !== question.correctAnswer && (
                        <XCircle className="h-5 w-5 text-red-600 ml-auto" />
                      )}
                  </>
                )}
              </div>
            </button>
          ))}
        </div>

        {showExplanation && (
          <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <h4 className="font-semibold text-blue-900 mb-2">üí° Gi·∫£i th√≠ch:</h4>
            <p className="text-blue-800">{question.explanation}</p>
          </div>
        )}

        <div className="flex justify-center pt-4">
          {!showExplanation ? (
            <Button
              onClick={handleSubmitAnswer}
              disabled={selectedAnswer === null}
              className="px-8"
            >
              X√°c nh·∫≠n ƒë√°p √°n
            </Button>
          ) : (
            <Button onClick={handleNextQuestion} className="px-8">
              {currentQuestion < quizQuestions.length - 1 ? (
                <>
                  C√¢u ti·∫øp theo
                  <ArrowRight className="h-4 w-4 ml-2" />
                </>
              ) : (
                "Xem k·∫øt qu·∫£"
              )}
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
