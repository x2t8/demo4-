import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, XCircle, AlertTriangle, Brain } from "lucide-react";

interface Question {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
  difficulty: "easy" | "medium" | "hard";
}

const questions: Question[] = [
  {
    id: 1,
    question:
      "B·∫°n nh·∫≠n ƒë∆∞·ª£c cu·ªôc g·ªçi t·ª´ ng∆∞·ªùi t·ª± x∆∞ng l√† c√¥ng an, y√™u c·∫ßu chuy·ªÉn ti·ªÅn ƒë·ªÉ 'b·∫£o to√†n t√†i s·∫£n'. B·∫°n s·∫Ω l√†m g√¨?",
    options: [
      "Chuy·ªÉn ti·ªÅn ngay l·∫≠p t·ª©c v√¨ s·ª£ b·ªã b·∫Øt",
      "C√∫p m√°y v√† g·ªçi l·∫°i s·ªë 113 ƒë·ªÉ x√°c minh",
      "H·ªèi th√™m th√¥ng tin ƒë·ªÉ ki·ªÉm tra",
      "B√°o v·ªõi gia ƒë√¨nh tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh",
    ],
    correctAnswer: 1,
    explanation:
      "C√¥ng an kh√¥ng bao gi·ªù y√™u c·∫ßu chuy·ªÉn ti·ªÅn qua ƒëi·ªán tho·∫°i. Lu√¥n c√∫p m√°y v√† g·ªçi l·∫°i s·ªë ch√≠nh th·ª©c 113 ƒë·ªÉ x√°c minh.",
    difficulty: "easy",
  },
  {
    id: 2,
    question:
      "Tr√™n m·∫°ng x√£ h·ªôi, b·∫°n th·∫•y qu·∫£ng c√°o ƒë·∫ßu t∆∞ v·ªõi l√£i su·∫•t 50%/th√°ng, c√≥ nhi·ªÅu ng∆∞·ªùi b√¨nh lu·∫≠n t√≠ch c·ª±c. B·∫°n nghƒ© g√¨?",
    options: [
      "ƒê√¢y l√† c∆° h·ªôi t·ªët, n√™n ƒë·∫ßu t∆∞ ngay",
      "L√£i su·∫•t qu√° cao, c√≥ th·ªÉ l√† l·ª´a ƒë·∫£o",
      "ƒê·∫ßu t∆∞ m·ªôt √≠t ƒë·ªÉ th·ª≠",
      "H·ªèi b·∫°n b√® c√≥ kinh nghi·ªám tr∆∞·ªõc",
    ],
    correctAnswer: 1,
    explanation:
      "L√£i su·∫•t 50%/th√°ng l√† b·∫•t kh·∫£ thi v√† ch·∫Øc ch·∫Øn l√† l·ª´a ƒë·∫£o. C√°c b√¨nh lu·∫≠n t√≠ch c·ª±c c√≥ th·ªÉ l√† t√†i kho·∫£n ·∫£o.",
    difficulty: "medium",
  },
  {
    id: 3,
    question:
      "Khi t·∫°o m·∫≠t kh·∫©u cho t√†i kho·∫£n ng√¢n h√†ng online, c√°ch n√†o an to√†n nh·∫•t?",
    options: [
      "S·ª≠ d·ª•ng t√™n + ng√†y sinh c·ªßa m√¨nh",
      "D√πng chung 1 m·∫≠t kh·∫©u cho t·∫•t c·∫£ t√†i kho·∫£n",
      "T·∫°o m·∫≠t kh·∫©u ph·ª©c t·∫°p ri√™ng bi·ªát cho t·ª´ng t√†i kho·∫£n",
      "Vi·∫øt m·∫≠t kh·∫©u v√†o gi·∫•y ƒë·ªÉ kh·ªèi qu√™n",
    ],
    correctAnswer: 2,
    explanation:
      "M·ªói t√†i kho·∫£n n√™n c√≥ m·∫≠t kh·∫©u ri√™ng bi·ªát, ph·ª©c t·∫°p v·ªõi s·ªë, ch·ªØ v√† k√Ω t·ª± ƒë·∫∑c bi·ªát. S·ª≠ d·ª•ng app qu·∫£n l√Ω m·∫≠t kh·∫©u n·∫øu c·∫ßn.",
    difficulty: "medium",
  },
  {
    id: 4,
    question:
      "B·∫°n nh·∫≠n ƒë∆∞·ª£c email t·ª´ 'ng√¢n h√†ng' y√™u c·∫ßu c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n qua link ƒë√≠nh k√®m. B·∫°n n√™n:",
    options: [
      "Click v√†o link v√† c·∫≠p nh·∫≠t ngay",
      "B·ªè qua email n√†y",
      "ƒêƒÉng nh·∫≠p tr·ª±c ti·∫øp v√†o website ng√¢n h√†ng ƒë·ªÉ ki·ªÉm tra",
      "Forward email cho b·∫°n b√® ƒë·ªÉ h·ªèi √Ω ki·∫øn",
    ],
    correctAnswer: 2,
    explanation:
      "Kh√¥ng bao gi·ªù click link trong email ƒë√°ng ng·ªù. Lu√¥n ƒëƒÉng nh·∫≠p tr·ª±c ti·∫øp v√†o website ch√≠nh th·ª©c c·ªßa ng√¢n h√†ng.",
    difficulty: "easy",
  },
  {
    id: 5,
    question:
      "Tr√™n TikTok/YouTube, b·∫°n th·∫•y video h∆∞·ªõng d·∫´n 'ki·∫øm ti·ªÅn online d·ªÖ d√†ng' v·ªõi thu nh·∫≠p kh·ªßng. B·∫°n ƒë√°nh gi√° nh∆∞ th·∫ø n√†o?",
    options: [
      "Tin t∆∞·ªüng v√† l√†m theo h∆∞·ªõng d·∫´n",
      "Nghi ng·ªù v√¨ qu√° d·ªÖ d√†ng v√† h·∫•p d·∫´n",
      "Th·ª≠ nghi·ªám v·ªõi s·ªë ti·ªÅn nh·ªè",
      "Chia s·∫ª cho b·∫°n b√® c√πng tham gia",
    ],
    correctAnswer: 1,
    explanation:
      "C√°c video 'ki·∫øm ti·ªÅn d·ªÖ d√†ng' th∆∞·ªùng l√† b·∫´y l·ª´a ƒë·∫£o. Ki·∫øm ti·ªÅn th·∫≠t lu√¥n c·∫ßn n·ªó l·ª±c v√† kh√¥ng c√≥ c√¥ng th·ª©c th·∫ßn k·ª≥ n√†o.",
    difficulty: "easy",
  },
];

export default function QuickAssessment() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [userAnswers, setUserAnswers] = useState<number[]>([]);
  const [isCompleted, setIsCompleted] = useState(false);

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
  };

  const handleNextQuestion = () => {
    if (selectedAnswer === null) return;

    const newUserAnswers = [...userAnswers, selectedAnswer];
    setUserAnswers(newUserAnswers);

    if (selectedAnswer === questions[currentQuestion].correctAnswer) {
      setScore(score + 1);
    }

    setShowResult(true);

    setTimeout(() => {
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
        setSelectedAnswer(null);
        setShowResult(false);
      } else {
        setIsCompleted(true);
      }
    }, 2500);
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setScore(0);
    setUserAnswers([]);
    setIsCompleted(false);
  };

  const getScoreLevel = () => {
    const percentage = (score / questions.length) * 100;
    if (percentage >= 80)
      return { level: "Xu·∫•t s·∫Øc", color: "text-green-600", emoji: "üèÜ" };
    if (percentage >= 60)
      return { level: "T·ªët", color: "text-blue-600", emoji: "üëç" };
    if (percentage >= 40)
      return { level: "Kh√°", color: "text-yellow-600", emoji: "üôÇ" };
    return { level: "C·∫ßn c·∫£i thi·ªán", color: "text-red-600", emoji: "üìö" };
  };

  if (isCompleted) {
    const result = getScoreLevel();
    return (
      <div className="py-16 bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
          <Card className="text-center">
            <CardHeader>
              <div className="text-6xl mb-4">{result.emoji}</div>
              <CardTitle className="text-2xl mb-2">
                K·∫øt qu·∫£ ƒë√°nh gi√° c·ªßa b·∫°n
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <div className="text-4xl font-bold mb-2">
                  {score}/{questions.length}
                </div>
                <Badge className={`text-lg px-4 py-2 ${result.color}`}>
                  {result.level}
                </Badge>
              </div>

              <div className="text-left bg-gray-50 p-4 rounded-lg">
                <h4 className="font-semibold mb-2">üìã Nh·∫≠n x√©t chi ti·∫øt:</h4>
                {result.level === "Xu·∫•t s·∫Øc" && (
                  <p>
                    Tuy·ªát v·ªùi! B·∫°n c√≥ ki·∫øn th·ª©c v·ªØng v√†ng v·ªÅ an to√†n s·ªë. H√£y
                    chia s·∫ª ki·∫øn th·ª©c n√†y v·ªõi ng∆∞·ªùi th√¢n!
                  </p>
                )}
                {result.level === "T·ªët" && (
                  <p>
                    Kh√° t·ªët! B·∫°n ƒë√£ n·∫Øm ƒë∆∞·ª£c nh·ªØng ki·∫øn th·ª©c c∆° b·∫£n. H√£y h·ªçc
                    th√™m c√°c module ƒë·ªÉ ho√†n thi·ªán h∆°n.
                  </p>
                )}
                {result.level === "Kh√°" && (
                  <p>
                    B·∫°n ƒë√£ c√≥ n·ªÅn t·∫£ng nh∆∞ng c·∫ßn h·ªçc th√™m. H√£y ƒë·ªçc k·ªπ c√°c module
                    ƒë·ªÉ n√¢ng cao kh·∫£ nƒÉng t·ª± b·∫£o v·ªá.
                  </p>
                )}
                {result.level === "C·∫ßn c·∫£i thi·ªán" && (
                  <p>
                    ƒê·ª´ng lo l·∫Øng! H√£y b·∫Øt ƒë·∫ßu h·ªçc t·ª´ module "An to√†n s·ªë" ƒë·ªÉ
                    trang b·ªã ki·∫øn th·ª©c c·∫ßn thi·∫øt.
                  </p>
                )}
              </div>

              <div className="flex flex-col sm:flex-row gap-4">
                <Button
                  onClick={resetQuiz}
                  variant="outline"
                  className="flex-1"
                >
                  üîÑ L√†m l·∫°i
                </Button>
                <Button className="flex-1 bg-blue-600 hover:bg-blue-700">
                  üìö H·ªçc ngay
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  const question = questions[currentQuestion];

  return (
    <div className="py-16 bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">
            <Brain className="inline h-8 w-8 mr-2 text-blue-600" />
            Ki·ªÉm Tra Ki·∫øn Th·ª©c An To√†n S·ªë
          </h2>
          <p className="text-gray-600">
            5 c√¢u h·ªèi nhanh ƒë·ªÉ ƒë√°nh gi√° m·ª©c ƒë·ªô hi·ªÉu bi·∫øt c·ªßa b·∫°n
          </p>
          <div className="mt-4">
            <Badge variant="outline" className="text-sm">
              C√¢u {currentQuestion + 1}/{questions.length} ‚Ä¢{" "}
              {question.difficulty === "easy"
                ? "üòä D·ªÖ"
                : question.difficulty === "medium"
                  ? "ü§î Trung b√¨nh"
                  : "üß† Kh√≥"}
            </Badge>
          </div>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="text-lg">{question.question}</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {question.options.map((option, index) => (
              <button
                key={index}
                onClick={() => handleAnswerSelect(index)}
                disabled={showResult}
                className={`w-full p-4 text-left rounded-lg border-2 transition-all ${
                  selectedAnswer === index
                    ? "border-blue-500 bg-blue-50"
                    : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                } ${showResult ? "cursor-not-allowed" : "cursor-pointer"}`}
              >
                <div className="flex items-center space-x-3">
                  <span className="flex-shrink-0 w-6 h-6 rounded-full border-2 border-gray-300 flex items-center justify-center text-sm font-semibold">
                    {String.fromCharCode(65 + index)}
                  </span>
                  <span>{option}</span>
                  {showResult && index === question.correctAnswer && (
                    <CheckCircle className="h-5 w-5 text-green-600 ml-auto" />
                  )}
                  {showResult &&
                    selectedAnswer === index &&
                    index !== question.correctAnswer && (
                      <XCircle className="h-5 w-5 text-red-600 ml-auto" />
                    )}
                </div>
              </button>
            ))}

            {showResult && (
              <div className="mt-6 p-4 bg-yellow-50 border-l-4 border-yellow-400 rounded-r-lg">
                <div className="flex items-start space-x-2">
                  <AlertTriangle className="h-5 w-5 text-yellow-600 mt-0.5" />
                  <div>
                    <h4 className="font-semibold text-yellow-800">
                      Gi·∫£i th√≠ch:
                    </h4>
                    <p className="text-yellow-700 mt-1">
                      {question.explanation}
                    </p>
                  </div>
                </div>
              </div>
            )}

            <div className="flex justify-between items-center pt-4">
              <div className="text-sm text-gray-500">
                ƒêi·ªÉm hi·ªán t·∫°i: {score}/{currentQuestion + (showResult ? 1 : 0)}
              </div>
              <Button
                onClick={handleNextQuestion}
                disabled={selectedAnswer === null || showResult}
                className="min-w-[120px]"
              >
                {currentQuestion === questions.length - 1
                  ? "üèÅ Ho√†n th√†nh"
                  : "‚û°Ô∏è Ti·∫øp theo"}
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
